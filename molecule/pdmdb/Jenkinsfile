pipeline {
  agent {
  label 'micro-amazon'
  }
  environment {
      PATH = '/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/ec2-user/.local/bin'
  }
  parameters {
        choice(
            name: 'PLATFORM',
            description: 'For what platform (OS) need to test',
            choices: [
                'centos-6',
                'centos-7',
                'debian-9',
                'debian-10',
                'ubuntu-bionic',
                'rhel8'
            ]
        )
        choice(
            name: 'REPO',
            description: 'Repo for testing',
            choices: [
                'testing',
                'experimental',
                'release'
            ]
        )
  }
  stages {
    stage('Set build name'){
      steps {
                script {
                    currentBuild.displayName = "${env.BUILD_NUMBER}-${env.PLATFORM}"
                }
            }
        }
    stage ('Setup Environment Variables') {
      steps {
       script {
       env.NAME = "${env.BUILD_NUMBER}-${env.PLATFORM}"
        }
       }
      }
    stage ('Prepare') {
      steps {
        checkout scm
        sh '''
            sudo yum install -y gcc python3-pip python3-devel libselinux-python openssl-devel
            sudo mkdir -p /usr/local/lib64/python3.7/site-packages
            sudo rsync -aHv /usr/lib64/python2.7/site-packages/*selinux* /usr/local/lib64/python3.7/site-packages/
            pip3 install --user molecule==2.22 pytest molecule-ec2 ansible wheel boto boto3 paramiko selinux
        '''
      }
    }
    stage ('Create virtual machines') {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'MOLECULE_AWS_PRIVATE_KEY', keyFileVariable: 'MOLECULE_AWS_PRIVATE_KEY', passphraseVariable: '', usernameVariable: ''),
        string(credentialsId: 'GCP_SECRET_KEY', variable: 'GCP_SECRET_KEY'), string(credentialsId: 'GCP_ACCESS_KEY', variable: 'GCP_ACCESS_KEY'),
        [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: '4462f2e5-f01c-4e3f-9586-2ffcf5bf366a', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
        [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'S3_ACCESS_KEY_ID', credentialsId: '2a84aea7-32a0-4598-9e8d-5153179097a9', secretKeyVariable: 'S3_SECRET_ACCESS_KEY']]) {
          sh '''
              cd molecule/pdmdb
              molecule create -s "${PLATFORM}"
          '''
        }
      }
    }
    stage ('Run playbook for test') {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'MOLECULE_AWS_PRIVATE_KEY', keyFileVariable: 'MOLECULE_AWS_PRIVATE_KEY', passphraseVariable: '', usernameVariable: ''),
        string(credentialsId: 'GCP_SECRET_KEY', variable: 'GCP_SECRET_KEY'), string(credentialsId: 'GCP_ACCESS_KEY', variable: 'GCP_ACCESS_KEY'),
        [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: '4462f2e5-f01c-4e3f-9586-2ffcf5bf366a', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
        [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'S3_ACCESS_KEY_ID', credentialsId: '2a84aea7-32a0-4598-9e8d-5153179097a9', secretKeyVariable: 'S3_SECRET_ACCESS_KEY']]) {
          sh '''
              cd molecule/pdmdb
              molecule converge -s "${PLATFORM}"
          '''
        }
      }
    }
    stage ('Start testinfra tests') {
      steps {
        sh '''
            cd molecule/pdmdb
            molecule verify -s "${PLATFORM}"
        '''
        junit "molecule/pdmdb/molecule/${PLATFORM}/report.xml"
      }
    }
      stage ('Start Cleanup ') {
      steps {

        sh '''
            cd molecule/pdmdb
            molecule cleanup -s "${PLATFORM}"
        '''
      }
    }
  }
  post {
    always {
      withCredentials([sshUserPrivateKey(credentialsId: 'MOLECULE_AWS_PRIVATE_KEY', keyFileVariable: 'MOLECULE_AWS_PRIVATE_KEY', passphraseVariable: '', usernameVariable: ''),
      [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: '4462f2e5-f01c-4e3f-9586-2ffcf5bf366a', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
        sh '''
            cd molecule/pdmdb
            molecule destroy -s "${PLATFORM}"
        '''
      }
    }
  }
}
