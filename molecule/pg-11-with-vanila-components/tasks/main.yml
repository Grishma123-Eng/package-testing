---
# This playbook does following:
#   enables Percona repository
#   installs Percona Platform for PostgreSQL packages
#   does some tests
#- name: include tasks for test env setup
#  include_tasks: ../../../tasks/test_prep.yml
- name: include tasks for test env setup
  include_tasks: ../test_prep.yml

### temp part until percona-release is updated for PPG project

- name: add the main Percona yum repos for centos 6 and 7
  yum: name=https://repo.percona.com/yum/percona-release-latest.noarch.rpm
  when: ansible_os_family == "RedHat"

- name: Install gnupg2 Debian
  apt:
    name: gnupg2
  when: ansible_os_family == "Debian"

- name: Install percona repository package
  apt:
    deb: https://repo.percona.com/apt/percona-release_latest.generic_all.deb
  when: ansible_os_family == "Debian"
#- name: download newer percona-release script
#  get_url:
#    url: https://raw.githubusercontent.com/percona/percona-repositories/master/scripts/percona-release.sh
#    dest: /usr/bin/percona-release
#    mode: '755'
#    force: true

- name: setup repo with percona-release
  command: percona-release enable ppg-11.6 {{ repo }}
  vars:
    repo: "{{ lookup('env', 'REPO') }}"

- name: enable tools repo
  command: percona-release enable tools {{ repo }}
  vars:
    repo: "{{ lookup('env', 'REPO') }}"

- name: install Percona Platform for PostgreSQL deb packages
  apt:
    name: "{{ packages }}"
    update_cache: yes
    state: latest
  vars:
    packages:
    - percona-postgresql
    - percona-postgresql-11
    - percona-postgresql-all
    - percona-postgresql-client
    - percona-postgresql-client-11
    - percona-postgresql-client-common
    - percona-postgresql-common
    - percona-postgresql-contrib
    - percona-postgresql-server-dev-11
    - percona-postgresql-server-dev-all
  when: ansible_os_family == "Debian"

- name: DNF clean RHEL
  command: sudo dnf module disable postgresql
  when: ansible_distribution == "RedHat"

- name: install Percona Platform for PostgreSQL rpm packages for RHEL
  yum:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
      - percona-postgresql-client-common
      - percona-postgresql-common
      - percona-postgresql-server-dev-all
      - percona-postgresql11
      - percona-postgresql11-contrib
      - percona-postgresql11-devel
      - percona-postgresql11-libs
      - percona-postgresql11-llvmjit
      - percona-postgresql11-server
  when: ansible_os_family == "RedHat"

- name: Initialize Postgres RHEL
  command: /usr/pgsql-11/bin/postgresql-11-setup initdb
  environment:
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  when: ansible_os_family == "RedHat"

- name: Start Postgres RHEL
  service:
    name: postgresql-11
    state: started
    enabled: yes
  when: ansible_os_family == "RedHat"

- name: Restart Postgres RHEL
  service:
    name: postgresql-11
    state: restarted
  when: ansible_os_family == "RedHat"

- name: Retart Postgres Debian
  command: sudo systemctl restart postgresql
  environment:
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  when: ansible_os_family == "Debian"

- name: Install pdg rhel7
  yum: name=https://download.postgresql.org/pub/repos/yum/11/redhat/rhel-7-x86_64/pgdg-centos11-11-2.noarch.rpm
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

- name: Add PostgreSQL YUM Repository RHEL8
  yum: name=https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm state=present
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

- name: install postgis RHEL
  yum:
    name: postgis25_11
    state: latest
  when: ansible_os_family == "RedHat"

- name: postgresql key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present
  when: ansible_os_family == "Debian"

- name: create variable
  command: bash -c "echo \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" "
  register: repo_line
  when: ansible_os_family == "Debian"


- name: add postgresql repo
  apt_repository:
    repo: "{{ repo_line.stdout }}"
    state: present
  when: ansible_os_family == "Debian"

- name: Install PostGIS
  apt: pkg=postgresql-11-postgis-2.5 state=present

  when: ansible_os_family == "Debian"

