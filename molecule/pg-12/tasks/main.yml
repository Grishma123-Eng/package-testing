---
# This playbook does following:
#   enables Percona repository
#   installs Percona Platform for PostgreSQL packages
#   does some tests
#- name: include tasks for test env setup
#  include_tasks: ../../../tasks/test_prep.yml
#- name: include tasks for test env setup
#  include_tasks: ../../../tasks/test_prep.yml

# - name: include tasks for enabling main repo
#   include: ../tasks/enable_main_repo.yml
#   when: lookup('env', 'install_repo') == "main"

### temp part until percona-release is updated for PPG project

- name: include tasks for enabling main repo (do this just for GPG key)
  include: ../../../tasks/enable_main_repo.yml

- name: Install gnupg2 Debian
  apt:
    name: gnupg2
  when: ansible_os_family == "Debian"

- name: Install percona repository package
  apt:
    deb: https://repo.percona.com/apt/percona-release_latest.generic_all.deb
  when: ansible_os_family == "Debian"

- name: setup repo with percona-release
  command: percona-release enable {{ pg_version }} {{ repo }}
  vars:
    repo: "{{ lookup('env', 'REPO') }}"
    pg_version: "{{ lookup('env', 'VERSION') }}"

- name: install Percona Platform for PostgreSQL 12 packages
  include_tasks: ../../../tasks/install_ppg12.yml

#- name: Install libpq-dev
#  apt:
#    name: "{{ packages }}"
#  vars:
#    packages:
#      - libpq-dev
#      - libdbd-pg-perl
#  when: ansible_os_family == "Debian"

- name: Initialize Postgres RHEL
  command: /usr/pgsql-12/bin/postgresql-12-setup initdb
  environment:
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  when: ansible_os_family == "RedHat"

- name: Start Postgres RHEL
  service:
    name: postgresql-12
    state: started
    enabled: yes
  when: ansible_os_family == "RedHat"

- name: Install pgaudit Debian
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      - percona-postgresql-12-pgaudit
      - percona-postgresql-12-pgaudit-dbgsym
  when: ansible_os_family == "Debian"

- name: Install pgaudit RHEL
  yum:
    name: percona-pgaudit
  when: ansible_os_family == "RedHat"

- name: Enable pgaudit for Debian
  lineinfile:
    path: /etc/postgresql/12/main/postgresql.conf
    line: shared_preload_libraries = 'pgaudit'
  when: ansible_os_family == "Debian"

- name: Enable pgaudit for RHEL
  lineinfile:
    path: /var/lib/pgsql/12/data/postgresql.conf
    line: shared_preload_libraries = 'pgaudit'
  when: ansible_os_family == "RedHat"

- name: Restart Postgres RHEL
  service:
    name: postgresql-12
    state: restarted
  when: ansible_os_family == "RedHat"

- name: Retart Postgres Debian
  command: sudo systemctl restart postgresql
  environment:
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  when: ansible_os_family == "Debian"

- name: Install pgbackrest Debian
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      - percona-pgbackrest
      - percona-pgbackrest-doc
      - percona-pgbackrest-dbgsym
  when: ansible_os_family == "Debian"

- name: Install pgbackrest RHEL
  yum:
    name: percona-pgbackrest
  when: ansible_os_family == "RedHat"

- name: Create pgbackrest directory
  file:
    path: /etc/pgbackrest/
    state: directory


- name: Create pgbackrest configuration Debian
  blockinfile:
    path: /etc/pgbackrest/pgbackrest.conf
    create: yes
    block: |
      [global]
      repo1-path=/var/lib/pgbackrest

      [testing]
      pg1-path=/var/lib/postgresql/12/main
      pg1-port=5432
  when: ansible_os_family == "Debian"

- name: Create pgbackrest configuration RHEL
  blockinfile:
    path: /etc/pgbackrest/pgbackrest.conf
    create: yes
    block: |
      [global]
      repo1-path=/var/lib/pgbackrest

      [testing]
      pg1-path=/var/lib/pgsql/12/data
      pg1-port=5432
  when: ansible_os_family == "RedHat"


- name: Configure backup config for Debian
  blockinfile:
    path: /etc/postgresql/12/main/postgresql.conf
    block: |
      archive_mode = on
      archive_command = 'pgbackrest --stanza=testing archive-push %p'
      max_wal_senders = 3
      wal_level = replica
  when: ansible_os_family == "Debian"

- name: Configure backup config for RHEL
  blockinfile:
    path: /var/lib/pgsql/12/data/postgresql.conf
    block: |
      archive_mode = on
      archive_command = 'pgbackrest --stanza=testing archive-push %p'
      max_wal_senders = 3
      wal_level = replica
  when: ansible_os_family == "RedHat"

- name: Restart Postgres RHEL
  service:
    name: postgresql-12
    state: restarted
  when: ansible_os_family == "RedHat"

- name: Retart Postgres Debian
  command: sudo systemctl restart postgresql
  environment:
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  when: ansible_os_family == "Debian"

- name: Install pgrepack Debian
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      - percona-postgresql-12-repack
      - percona-postgresql-12-repack-dbgsym
  when: ansible_os_family == "Debian"

- name: Install pgrepack RHEL
  yum:
    name: percona-pg_repack12
  when: ansible_os_family == "RedHat"

- name: Install patroni
  yum:
    name: percona-patroni

- name: Install GCC Deb
  apt:
    name: gcc
  when: ansible_os_family == "Debian"

- name: Install GCC RHEL
  yum:
    name: gcc
  when: ansible_os_family == "RedHat"

- name: Create temporary directory for compilation
  command: mkdir /tmp/libpq_command_temp_dir

- name: Copy libpq source file
  copy:
    src: lib_version.c
    dest: /tmp/libpq_command_temp_dir
