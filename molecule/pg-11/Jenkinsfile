pipeline {
  agent any
  environment {
      PATH = '/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/ec2-user/.local/bin'
  }
  parameters {
        choice(
            name: 'PLATFORM',
            description: 'For what platform (OS) need to test',
            choices: [
                'centos7',
                'debian9',
                'debian10',
                'ubuntu-bionic',
                'rhel8'
            ]
        )
  }
  stages {
    stage('Set build name'){
      steps {
                script {
                    currentBuild.displayName = "${env.BUILD_NUMBER}-${env.PLATFORM}"
                }
            }
        }
    stage ('Setup Environment Variables') {
      steps {
       script {
        if (params.PLATFORM=='centos7'){
         env.IMAGE='ami-0837950ffca9ae6e8'
        }
        else if (params.PLATFORM=='debian9'){
          env.IMAGE='ami-006c08e13f35edce0'
        }
        else if (params.PLATFORM=='debian10'){
          env.IMAGE='ami-0be88f8d647409e61'
         }
        else if (params.PLATFORM=='ubuntu-bionic'){
          env.IMAGE='ami-0a8561d8c5a4f098a'
         }
        }
       }
      }
    stage ('Prepare') {
      steps {
        checkout scm
        sh '''
            sudo yum install -y gcc python3-pip python3-devel libselinux-python openssl-devel
            sudo mkdir -p /usr/local/lib64/python3.7/site-packages
            sudo rsync -aHv /usr/lib64/python2.7/site-packages/*selinux* /usr/local/lib64/python3.7/site-packages/
            pip3 install --user pytest molecule ansible wheel boto boto3 paramiko selinux 'molecule[ec2]'
        '''
      }
    }
    stage ('Create virtual machines') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: '4462f2e5-f01c-4e3f-9586-2ffcf5bf366a', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
          sh '''
              cd molecule/pg-11
              python3 -m molecule create -s ec2
          '''
        }
      }
    }
    stage ('Run playbook for test') {
      steps {
        sh '''
            cd molecule/pg-11
            python3 -m molecule --debug converge -s ec2
        '''
      }
    }
    stage ('Start testinfra tests') {
      steps {
        sh '''
            cd molecule/pg-11
            python3 -m molecule verify -s ec2
        '''
        junit 'molecule/pg-11/molecule/default/*.xml'
      }
    }
    stage ('Start packages deletion') {
      steps {
        sh '''
            cd molecule/pg-11
            python3 -m molecule cleanup -s ec2
        '''
      }
    }
  }
  post {
    always {
      withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: '4462f2e5-f01c-4e3f-9586-2ffcf5bf366a', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
        sh '''
            cd molecule/pg-11
            python3 -m molecule destroy -s ec2
        '''
      }
    }
  }
}