---
# This playbook does following:
#   enables Percona main repository
#   installs previous version of PMM client
#   enables Percona testing repository
#   upgrades PMM client
#   does some tests of custom port listening

- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    test_repo: "{{ lookup('env', 'install_repo') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') | default('auto', true) }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') }}"
    custom_port: 17788
    port_flag: "--pmm-agent-listen-port={{ custom_port }}"
    cmd_admin_list: "pmm-admin list {{ port_flag }}"

  tasks:
  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - set_fact:
      rnd: "{{ 1000 | random }}"
    run_once: yes

  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_main_repo.yml

### enable pmm2-client release and install old version to update
  - name: enable pmm2-client release repo
    command: percona-release enable pmm2-client release
    when: test_repo == "main"

  - name: update apt repositories
    command: apt-get update -y
    when: test_repo == "main" and ansible_os_family == "Debian"

  - name: update repo for redhat
    shell: yum update -y
    when: test_repo == "main" and ansible_os_family == "RedHat"
    become: true

  - name: detect and save release minor version
    shell: "wget -q https://registry.hub.docker.com/v2/repositories/percona/pmm-server/tags -O - | jq -r .results[].name  | grep -v latest | sort -V | tail -n1 | awk -F. '{print $2}'"
    register: pmm_release_minor_version
    when: test_repo == "main"

  - name: grep previous release PMM Client version from yum list
    shell: "yum list pmm2-client --showduplicates | grep 2.{{ pmm_release_minor_version.stdout | int -1 | tail -n1}}"
    register: pmm_old_version
    when: test_repo == "main" and ansible_os_family == "RedHat"

  - name: grep previous release PMM Client version from apt list
    shell: "apt-cache madison pmm2-client | grep 2.{{ pmm_release_minor_version.stdout | int -1 }} | awk '{print $3}'"
    register: pmm_old_version
    when: test_repo == "main" and ansible_os_family == "Debian"

  - name: set PMM Client package name with old version to install
    set_fact:
      pmm_client_old: "pmm2-client={{ pmm_old_version.stdout }}"
    when: test_repo == "main"

  - name: set PMM Client package name to install
    set_fact:
      pmm_client_old: "pmm2-client"
    when: test_repo != "main"

  - name: print old version
    ansible.builtin.debug:
      msg: "Installing old version: '{{ pmm_client_old }}'"

  - name: install PMM client old deb packages
    apt: name={{ pmm_client_old }} update_cache=yes state=present
    when: ansible_os_family == "Debian"

  - name: install PMM client old rpm packages
    yum: name={{ pmm_client_old }} state=present
    when: ansible_os_family == "RedHat"

### Setup PMM Client
  - name: define "--metrics-mode=push|pull|auto" argument
    set_fact:
      metrics_mode_arg: "--metrics-mode={{ metrics_mode }}"

  - name: Use pmm-agent setup to configure pmm client to connect to server
    shell: pmm-agent setup --config-file=/usr/local/percona/pmm2/config/pmm-agent.yaml --force --server-address={{ pmm_server_address }} --server-insecure-tls --listen-port={{ custom_port }} {{ metrics_mode_arg }} --server-username=admin --server-password=admin {{ instance_ip }} generic node2_{{ instance_ip }}

  - name: Check if the configuration generated with pmm-agent-listen-port is using the custom port
    shell: "cat /usr/local/percona/pmm2/config/pmm-agent.yaml | grep -o -c '{{ custom_port }}' | grep '1'"
    become: yes

  - name: kill pmm-agent process
    command: "pkill -f pmm-agent"
    become: yes

  - name: wait for pmm_agent status from pmm-admin list
    shell: "{{ cmd_admin_list }} | grep pmm_agent | awk -F' ' '{print $2}'"
    register: pmm_agent_status
    until: pmm_agent_status.stdout.find('Connected') != -1
    delay: 1
    retries: 5

  - name: verify pmm-admin list contains pmm_agent with Connected status
    assert:
      that:
        - "'Connected' in pmm_agent_status.stdout"
      fail_msg: "pmm-agent is not connected to server!"
      success_msg: "pmm-agent is connected to server"

### start PS 5.7
  - name: install and start Percona Server 5.7
    include_tasks: ../tasks/start_ps57.yml

    # there was no metric check - should be added?

    #  - name: check if Metric End point with Auth works for Mysqld Exporter
    #    shell: "{{item}}"
    #    with_items:
    #      - "bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name mysql_{{ instance_ip }} --metric_name mysql_up --pmm_server_ip {{pmm_server_address}} --agent_type mysqld_exporter --metric_value 1"
## end PS

### start PSMDB 4.4
  - name: install and start Percona Server MongoDB 4.4
    include_tasks: ../tasks/start_psmdb44.yml

    # there was no metric check and removing - add it?
#  - name: check if Metric End point with Auth works for MongoDB Exporter
#    shell: "{{item}}"
#    with_items:
#      - "bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name mongodb_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1 "
#
#  - name: check if Metric End point with Auth works for MongoDB Exporter for service with socket
#    shell: "{{item}}"
#    with_items:
#      - "bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name mongodb_socket_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1 "
#
#  - name: remove mongodb service from monitoring which was added via socket
#    command: pmm-admin remove mongodb mongodb_socket_{{ instance_ip }}
### end PSMDB

### start pgsql 13
  - name: install and start Percona Server MongoDB 4.4
    include_tasks: ../tasks/start_psql13.yml

    # there was no metric check and removing - add it?

#  - name: check if Metric End point with Auth works for Postgres Exporter
#    shell: "{{item}}"
#    with_items:
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#
#  - name: check if Metric End point with Auth works for Postgres Exporter when service added via socket
#    shell: "{{item}}"
#    with_items:
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#
#  - name: remove postgresql instances added via socket
#    command: pmm-admin remove postgresql pgsql_socket_{{ instance_ip }}
## end PG

  - name: include tasks for enabling testing repo
    include: ../tasks/enable_testing_repo.yml
    when: lookup('env', 'install_repo') == "testing" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling experimental repo
    include_tasks: ../tasks/enable_experimental_repo.yml
    when: lookup('env', 'install_repo') == "experimental"

  - name: enable pmm2-client release repo
    command: percona-release enable pmm2-client release
    when: test_repo == "main"

  - name: update apt repositories
    command: apt-get update -y
    when: test_repo == "main" and ansible_os_family == "Debian"

  - name: update repo for redhat
    shell: yum update -y
    when: test_repo == "main" and ansible_os_family == "RedHat"
    become: true

  - name: upgrade PMM client to the latest deb packages
    apt: name={{item}} update_cache=yes state=latest
    with_items:
    - pmm2-client
    when: ansible_os_family == "Debian"

  - name: upgrade PMM client to the latest rpm packages
    yum: name={{item}} state=latest
    with_items:
    - pmm2-client
    when: ansible_os_family == "RedHat"

### Checks after upgrade
  - name: check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_client_version.yml

  - name: Check if the configuration generated with pmm-agent-listen-port is using the custom port
    shell: "cat /usr/local/percona/pmm2/config/pmm-agent.yaml | grep -o -c '{{ custom_port }}' | grep '1'"
    become: yes

  - name: check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_status_versions.yml

  - name: get pmm-admin list for checks
    command: "{{ cmd_admin_list }}"
    register: list_output

  - name: Assert if the pmm-admin list contains mongodb instance
    assert:
      that:
        - "'MongoDB' in list_output.stdout"

  - name: Assert if the pmm-admin list contains mysql
    assert:
      that:
        - "'MySQL' in list_output.stdout"

  - name: Assert if the pmm-admin list contains postgreSQL instance
    assert:
      that:
        - "'PostgreSQL' in list_output.stdout"
    when: ansible_distribution == 'Ubuntu' and ansible_distribution_release != 'xenial'

  - name: grep pmm_agent status from pmm-admin list
    shell: "{{ cmd_admin_list }} | grep pmm_agent | awk -F' ' '{print $2}'"
    register: pmm_agent_status

  - name: verify pmm-admin list contains pmm_agent with Connected status
    assert:
      that:
        - "'Connected' in pmm_agent_status.stdout"
      fail_msg: "pmm-agent is not connected to server!"
      success_msg: "pmm-agent is connected to server"

  - name: Wait for node_exporter to be Running Status After Upgrade
    shell: "{{ cmd_admin_list }} | grep node_exporter | awk -F' ' '{print $2}'"
    register: ne_status
    until: ne_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: check if node_exporter is Running
    shell: "{{ cmd_admin_list }} | grep node_exporter | awk -F' ' '{print $2}'"
    register: node_exporter_status

  - name: Print the node_exporter_status
    ansible.builtin.debug:
      msg: Node Exporter Status is {{ node_exporter_status.stdout }}

  - name: Assert if the pmm-admin list contains node_exporter and Running state
    assert:
     that:
      - "'Running' in node_exporter_status.stdout"

  - name: Wait for vmagent to be Running Status After Upgrade
    shell: "{{ cmd_admin_list }} | grep vmagent | awk -F' ' '{print $2}'"
    register: vm_status
    until: vm_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: check if vmagent is Running
    shell: "{{ cmd_admin_list }} | grep vmagent | awk -F' ' '{print $2}'"
    register: vmagent_status

  - name: Print the vmagent Status
    ansible.builtin.debug:
      msg: vmagent status is {{ vmagent_status.stdout }}

  - name: Assert if the pmm-admin list contains vmagent and Running State
    assert:
     that:
      - "'Running' in vmagent_status.stdout"
