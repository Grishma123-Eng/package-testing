---
# This playbook does following:
#   enables Percona main repository
#   installs previous version of PMM client and PT
#   enables Percona testing repository
#   upgrades PMM client and PT to the latest version
#   does some tests

- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    test_repo: "{{ lookup('env', 'install_repo') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') }}"

  tasks:
  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_main_repo.yml

  - name: enable pmm2-client release repo
    command: percona-release enable pmm2-client release
    when: test_repo == "main"

  - name: update apt repositories
    command: apt-get update -y
    when: test_repo == "main" and ansible_os_family == "Debian"

  - name: update repo for redhat
    shell: yum update -y
    when: test_repo == "main" and ansible_os_family == "RedHat"
    become: true

  - name: detect and save release minor version
    shell: "wget -q https://registry.hub.docker.com/v2/repositories/percona/pmm-server/tags -O - | jq -r .results[].name  | grep -v latest | sort -V | tail -n1 | awk -F. '{print $2}'"
    register: pmm_release_minor_version
    when: test_repo == "main"

  - name: debug yum
    shell: "yum list pmm2-client --showduplicates"
    register: yum_list
    when: test_repo == "main" and ansible_os_family == "RedHat"

  - debug: var=yum_list.stdout
    when: test_repo == "main" and ansible_os_family == "RedHat"

  - name: grep previous release PMM Client version from yum list
    shell: "yum list pmm2-client --showduplicates | grep 2.{{ pmm_release_minor_version.stdout | int -1 }}"
    register: pmm_old_version
    when: test_repo == "main" and ansible_os_family == "RedHat"

  - name: grep previous release PMM Client version from apt list
    shell: "apt-cache madison pmm2-client | grep 2.{{ pmm_release_minor_version.stdout | int -1 }} | awk '{print $3}'"
    register: pmm_old_version
    when: test_repo == "main" and ansible_os_family == "Debian"

  - name: set PMM Client package name with old version to install
    set_fact:
      pmm_client_old: "pmm2-client={{ pmm_old_version.stdout }}"
    when: test_repo == "main"

  - name: set PMM Client package name to install
    set_fact:
      pmm_client_old: "pmm2-client"
    when: test_repo != "main"

  - name: Print the pmm-admin list value
    ansible.builtin.debug:
      msg: "Installing old version: '{{ pmm_client_old }}'"
    when: test_repo == "main"

  - name: install PMM client old deb packages
    apt: name={{ pmm_client_old }} update_cache=yes state=present
    when: ansible_os_family == "Debian"

  - name: install PMM client old rpm packages
    yum: name={{ pmm_client_old }} state=present
    when: ansible_os_family == "RedHat"

  - name: Print PMM2-Client Version before upgrade
    command: pmm-admin --version
    register: version
  - debug: var=version.stderr_lines

  - name: configure pmm client to connect to server in push/auto Mode
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode=auto --server-url=https://admin:admin@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}
    when: lookup('env', 'metrics_mode') == "push" or lookup('env', 'metrics_mode') == ""

  - name: configure pmm client to connect to server in pull Mode
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode=pull --server-url=https://admin:admin@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}
    when: lookup('env', 'metrics_mode') == "pull"

  - name: include tasks for enabling test repo
    include_tasks: ../tasks/enable_testing_repo.yml
    when: test_repo == "testing" or test_repo == ""

  - name: include tasks for enabling experimental repo
    include_tasks: ../tasks/enable_experimental_repo.yml
    when: test_repo == "experimental"

  - name: upgrade PMM client to the latest deb packages
    apt: name=pmm2-client update_cache=yes state=latest
    when: ansible_os_family == "Debian"

  - name: upgrade PMM client to the latest rpm packages
    yum: name=pmm2-client state=latest
    when: ansible_os_family == "RedHat"

  - name: check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_client_version.yml

  - name: check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_status_versions.yml

  - name: remove PMM client deb packages
    apt: name={{item}} state=absent
    with_items:
    - pmm2-client
    when: ansible_os_family == "Debian"

  - name: remove PMM client rpm packages
    yum: name={{item}} state=absent
    with_items:
    - pmm2-client
    when: ansible_os_family == "RedHat"
