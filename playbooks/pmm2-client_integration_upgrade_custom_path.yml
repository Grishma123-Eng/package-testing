---
# This playbook does following:
#   enables Percona main repository
#   installs previous version of PMM client
#   enables Percona testing repository
#   upgrades PMM client
#   does some tests

- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') }}"

  tasks:
  - name: Install Needed Packages, update repo for redhat
    shell: "{{item}}"
    with_items:
      - "yum install epel-release -y"
      - "yum update -y"
    when: ansible_os_family == "RedHat"
    become: true

  - name: Install Needed Packages, update repo for debian
    shell: "{{item}}"
    with_items:
      - "apt-get update"
    when: ansible_os_family == "Debian"
    become: true

  - name: Install JQ for exporter end point metric fetch
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - jq
    when: ansible_os_family == "RedHat"
  
  - name: Install JQ for exporter end point metric fetch
    apt:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - jq
    when: ansible_os_family == "Debian"

  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_main_repo.yml

  - name: install PMM client old deb packages
    apt: name={{item}} update_cache=yes state=latest
    with_items:
    - pmm2-client
    when: ansible_os_family == "Debian"

  - name: install acl packages
    apt: name={{item}} update_cache=yes state=latest
    with_items:
    - acl
    when: ansible_os_family == "Debian"

  - name: install PMM client old rpm packages
    yum: name={{item}} state=latest
    with_items:
    - pmm2-client
    when: ansible_os_family == "RedHat"

  - name: setup pmm2-client artifacts for custom path
    command: "{{item}}"
    with_items:
      - "chmod +x /package-testing/scripts/pmm2_client_custom_path.sh"
      - "/package-testing/scripts/pmm2_client_custom_path.sh"

  - name: configure pmm client to connect to server in push/auto Mode
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode=auto --paths-base=/pmm2-client-custom-path/ --server-url=https://admin:admin@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}
    when: lookup('env', 'metrics_mode') == "push" or lookup('env', 'metrics_mode') == ""

  - name: configure pmm client to connect to server in pull Mode
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode=pull --paths-base=/pmm2-client-custom-path/ --server-url=https://admin:admin@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}
    when: lookup('env', 'metrics_mode') == "pull"

  - name: Check if the configuration generated with paths-base is using the custom path
    shell: cat /usr/local/percona/pmm2/config/pmm-agent.yaml | grep -o -c "/pmm2-client-custom-path" | grep "14"
    become: yes

### start PS 5.7
  - name: install and start Percona Server 5.7
    include_tasks: ../tasks/start_ps57.yml

    # there was no metric check - should be added?

#  - name: check if Metric End point with Auth works for Mysqld Exporter
#    shell: "{{item}}"
#    with_items:
#      - "bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name mysql_{{ instance_ip }} --metric_name mysql_up --pmm_server_ip {{pmm_server_address}} --agent_type mysqld_exporter --metric_value 1"
## end PS

### start PSMDB 4.4
  - name: install and start Percona Server MongoDB 4.4
    include_tasks: ../tasks/start_psmdb44.yml

    # there was no metric check and removing - add it?
#  - name: check if Metric End point with Auth works for MongoDB Exporter
#    shell: "{{item}}"
#    with_items:
#      - "bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name mongodb_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1 "
#
#  - name: check if Metric End point with Auth works for MongoDB Exporter for service with socket
#    shell: "{{item}}"
#    with_items:
#      - "bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name mongodb_socket_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1 "
#
#  - name: remove mongodb service from monitoring which was added via socket
#    command: pmm-admin remove mongodb mongodb_socket_{{ instance_ip }}
### end PSMDB

### start pgsql 13
  - name: install and start Percona Server MongoDB 4.4
    include_tasks: ../tasks/start_psql13.yml

    # there was no metric check and removing - add it?

#  - name: check if Metric End point with Auth works for Postgres Exporter
#    shell: "{{item}}"
#    with_items:
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#
#  - name: check if Metric End point with Auth works for Postgres Exporter when service added via socket
#    shell: "{{item}}"
#    with_items:
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#      - bash -x /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
#
#  - name: remove postgresql instances added via socket
#    command: pmm-admin remove postgresql pgsql_socket_{{ instance_ip }}
## end PG

  - name: include tasks for enabling testing repo
    include: ../tasks/enable_testing_repo.yml
    when: lookup('env', 'install_repo') == "testing" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling experimental repo
    include_tasks: ../tasks/enable_experimental_repo.yml
    when: lookup('env', 'install_repo') == "experimental"

  - name: upgrade PMM client to the latest deb packages
    apt: name={{item}} update_cache=yes state=latest
    with_items:
    - pmm2-client
    when: ansible_os_family == "Debian"

  - name: upgrade PMM client to the latest rpm packages
    yum: name={{item}} state=latest
    with_items:
    - pmm2-client
    when: ansible_os_family == "RedHat"

  - name: Get Exporter Binaries for the new version
    shell: "{{item}}"
    with_items:
      - "bash -xe /package-testing/scripts/pmm2_get_exporter_binaries.sh"

  - name: check that PMM client version is correct
    command: /package-testing/version_check.sh pmm2
    when: lookup('env', 'install_repo') == "experimental" or lookup('env', 'install_repo') == ""

  - name: check that PMM client version is correct
    command: /package-testing/version_check.sh pmm2-rc
    when: lookup('env', 'install_repo') == "testing"

  - name: Check if the configuration generated with paths-base is using the custom path after upgrade client
    shell: cat /usr/local/percona/pmm2/config/pmm-agent.yaml | grep -o -c /pmm2-client-custom-path | grep "14"
    become: yes

  - name: check if mongodb is still being monitored
    command: pmm-admin list
    register: list_output

  - name: Assert if the pmm-admin list contains mongodb instance
    assert:
      that:
        - "'MongoDB' in list_output.stdout"

  - name: Assert if the pmm-admin list contains mysql
    assert:
      that:
        - "'MySQL' in list_output.stdout"

  - name: Assert if the pmm-admin list contains postgreSQL instance
    assert:
      that:
        - "'PostgreSQL' in list_output.stdout"
    when: ansible_distribution == 'Ubuntu' and ansible_distribution_release != 'xenial'

  - name: check if pmm_agent is connected
    shell: pmm-admin list | grep pmm_agent | awk -F" " '{print $2}'
    register: pmm_agent_status

  - name: Assert if the pmm-admin list contains pmm_agent type and Connected
    assert:
     that:
      - "'Connected' in pmm_agent_status.stdout"

  - name: Wait for node_exporter to be Running Status After Upgrade
    shell: pmm-admin list | grep node_exporter | awk -F" " '{print $2}'
    register: ne_status
    until: ne_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: check if node_exporter is Running
    shell: pmm-admin list | grep node_exporter | awk -F" " '{print $2}'
    register: node_exporter_status

  - name: Print the node_exporter_status
    ansible.builtin.debug:
      msg: Node Exporter Status is {{ node_exporter_status.stdout }}

  - name: Assert if the pmm-admin list contains node_exporter and Running state
    assert:
     that:
      - "'Running' in node_exporter_status.stdout"

  - name: Wait for vmagent to be Running Status After Upgrade
    shell: pmm-admin list | grep vmagent | awk -F" " '{print $2}'
    register: vm_status
    until: vm_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: check if vmagent is Running
    shell: pmm-admin list | grep vmagent | awk -F" " '{print $2}'
    register: vmagent_status

  - name: Print the vmagent Status
    ansible.builtin.debug:
      msg: vmagent status is {{ vmagent_status.stdout }}

  - name: Assert if the pmm-admin list contains vmagent and Running State
    assert:
     that:
      - "'Running' in vmagent_status.stdout"

  - name: Fetch PMM-Admin version via pmm-admin status output
    shell: pmm-admin status | grep pmm-admin | awk -F' ' '{print $3}'
    register: pmm_admin_version

  - name: Print the PMM-Admin Version on Status command
    ansible.builtin.debug:
      msg: pmm-admin version is {{ pmm_admin_version.stdout }}

  - name: check if Metric End point with Auth works for Node Exporter, MysqlD Exporter, MongoDB Exporter, Postgres Exporter
    shell: "{{item}}"
    with_items:
      - "bash -xe /package-testing/scripts/pmm2_check_metric.sh --metric_name node_textfile_scrape_error --pmm_server_ip {{pmm_server_address}} --agent_type node_exporter --metric_value 0"
      - "bash -xe /package-testing/scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1"
      - "bash -xe /package-testing/scripts/pmm2_check_metric.sh --service_name mongodb_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1"
      - "bash -xe /package-testing/scripts/pmm2_check_metric.sh --service_name mysql_{{ instance_ip }} --metric_name mysql_up --pmm_server_ip {{pmm_server_address}} --agent_type mysqld_exporter --metric_value 1"

  - name: Assert if the version output value is strict matched with expected version
    assert:
     that:
      - "'{{ pmm_version }}' in pmm_admin_version.stdout"
    when: lookup('env', 'install_repo') == "testing"

  - name: remove PMM client deb packages
    apt: name={{item}} state=absent
    with_items:
    - pmm2-client
    when: ansible_os_family == "Debian"

  - name: remove PMM client rpm packages
    yum: name={{item}} state=absent
    with_items:
    - pmm2-client
    when: ansible_os_family == "RedHat"
