---
# This playbook does following:
#   enables Percona testing repository
#   installs latest version of PMM client and PT
#   does some tests

- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') }}"
    pmm_repo: "{{ lookup('env', 'install_repo') }}"
    custom_path: "/pmm2-client-custom-path"

  tasks:
  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - name: include tasks for test env setup
    include_tasks: ../tasks/pmm2_client_test_prepare.yml

  - name: install pmm2-client tarball to custom path
    command: "../scripts/pmm2_client_install_tarball.sh -v {{ pmm_version }} -p {{ custom_path }}"

  - name: check that PMM client dev-latest version is correct
    command: ../version_check.sh pmm2
    when: pmm_repo == "experimental"

  - name: check that PMM client RC version is correct
    command: ../version_check.sh pmm2-rc
    ### "testing" "main" "tools-main" "pmm2-client-main"
    when: pmm_repo != "experimental"

  - name: Start agent
    shell: pmm-agent --config-file={{ custom_path }}/config/pmm-agent.yaml > pmm-agent.log 2>&1 &

  - name: define "--metrics-mode=push|pull|auto" argument
    set_fact:
      metrics_mode_arg: "--metrics-mode={{ metrics_mode }}"

  - name: configure pmm client with wrong path-base to check an error
    shell: pmm-admin config --force --server-insecure-tls {{ metrics_mode_arg }} --paths-base=/wrong_folder  --server-url=https://admin:admin@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}

  - name: Print PMM2-Client Status
    command: pmm-admin status
    register: status
    ignore_errors: yes
  - debug: var=status.stderr_lines

  - name: Fetch PMM-Admin version via pmm-admin status output
    shell: pmm-admin status | grep pmm-admin | awk -F' ' '{print $3}'
    register: pmm_admin_version

  - name: Print the PMM-Admin Version on Status command
    ansible.builtin.debug:
      msg: pmm-admin version is {{ pmm_admin_version.stdout }}

  - name: Assert if the version output value is strict matched with expected version
    assert:
     that:
      - "'{{ pmm_version }}' in pmm_admin_version.stdout"
    when: lookup('env', 'install_repo') == "testing"

  - name: Wait for node_exporter to have Waiting Status.
    shell: pmm-admin list | grep 'node_exporter' | awk -F" " '{print $2}'
    register: node_exporter_status
    until: node_exporter_status.stdout.find('Waiting') != -1
    delay: 5
    retries: 5
# there is no journal
  - name: Check pmm-agent log to see the error about wrong base path
    shell: journalctl -u pmm-agent | grep 'no such file or directory'

  - name: configure pmm client with empty path-base
    shell: pmm-admin config --force --server-insecure-tls {{ metrics_mode_arg }} --paths-base=  --server-url=https://admin:admin@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}

  - name: Fetch PMM-Admin version via pmm-admin status output
    shell: pmm-admin status | grep pmm-admin | awk -F' ' '{print $3}'
    register: pmm_admin_version

  - name: Print the PMM-Admin Version on Status command
    ansible.builtin.debug:
      msg: pmm-admin version is {{ pmm_admin_version.stdout }}

  - name: Assert if the version output value is strict matched with expected version
    assert:
     that:
      - "'{{ pmm_version }}' in pmm_admin_version.stdout"
    when: lookup('env', 'install_repo') == "testing"

  - name: Wait for node_exporter to have Running Status.
    shell: pmm-admin list | grep 'node_exporter' | awk -F" " '{print $2}'
    register: node_exporter_status
    until: node_exporter_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: Check if the configuration generated with paths-base is using the custom path
    shell: cat /usr/local/percona/pmm2/config/pmm-agent.yaml | grep -o -c "/usr/local/percona/pmm2" | grep "14"
    become: yes

  - name: PMM-8141 fix for deleted vmscrpconfig file, file being created with vmagent reload
    command: "{{item}}"
    with_items:
      - "rm -r /tmp/vm_agent"
      - "pkill -f vmagent"
    become: yes

  - name: Pause for 10 seconds to create config file
    pause:
      seconds: 10

  - name: PMM-8141 verify new vmscrpconfig folder is created at tmp after killing vmagent process
    command: "{{item}}"
    with_items:
      - "ls -la /tmp/vm_agent"
    become: yes

  - name: Wait for VMAGENT to have Running Status.
    shell: pmm-admin list | grep 'vmagent' | awk -F" " '{print $2}'
    register: vmagent_status
    until: vmagent_status.stdout.find('Running') != -1
    delay: 5
    retries: 5
