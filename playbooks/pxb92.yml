---
- hosts: all
  become: true
  become_method: sudo
  environment:
    chdir: "{{ playbook_dir }}"

  tasks:
    - name: Read MYSQL_VERSION from VERSIONS file
      shell: grep '^MYSQL_VERSION=' /package-testing/VERSIONS | cut -d'=' -f2 | tr -d '"'
      register: MYSQL_VERSION_var

    - name: Set MySQL version fact
      set_fact:
        MYSQL_VERSION: "{{ MYSQL_VERSION_var.stdout }}"

    - name: Extract major.minor for MySQL
      shell: echo "{{ MYSQL_VERSION }}" | cut -d. -f1,2
      register: mysql_major_minor

    - name: Set MySQL major.minor fact
      set_fact:
        mysql_major_minor: "{{ mysql_major_minor.stdout }}"

    - name: Extract PXB version
      shell: grep '^PXB_VERSION=' /package-testing/VERSIONS | cut -d'=' -f2 | tr -d '"'
      register: pxb_version_var

    - name: Set PXB version fact
      set_fact:
        pxb_version: "{{ pxb_version_var.stdout }}"

    - name: Download MySQL tarball for .tar-based install
      when: lookup('env', 'install_type') == 'tar'
      get_url:
        url: "https://downloads.mysql.com/archives/get/p/23/file/mysql-server_{{ MYSQL_VERSION }}-1ubuntu22.04_amd64.deb-bundle.tar"
        dest: "/package-testing/mysql-server_{{ MYSQL_VERSION }}.tar"

    - name: Extract MySQL tarball
      when: lookup('env', 'install_type') == 'tar'
      unarchive:
        src: "/package-testing/mysql-server_{{ MYSQL_VERSION }}.tar"
        dest: /tmp
        remote_src: yes

    - name: Start MySQL from tarball manually
      command: /opt/mysql/bin/mysqld_safe --defaults-file=/opt/mysql/my.cnf --user=mysql
      async: 30
      poll: 0
      when:
        - install_type == "tar"
        - lookup('env', 'server_to_test') == "ms_innovation_lts"

    - name: Install MySQL from extracted .deb packages
      when: lookup('env', 'install_type') == 'tar'
      shell: dpkg -i /tmp/*.deb || apt-get install -f -y
      environment:
        DEBIAN_FRONTEND: noninteractive

    - name: Install MySQL from repo
      when: lookup('env', 'install_type') == 'repo'
      apt:
        name: mysql-server
        state: present
        update_cache: yes

    - name: Install dependencies
      apt:
        name:
          - pv
          - unzip
          - lz4
          - zstd
        update_cache: yes

    - name: Start MySQL service
      service:
        name: mysql
        state: started

    - name: Set root password
      shell: /package-testing/setpass_57.sh

    - name: Install PXB from tarball
      unarchive:
        src: "/package-testing/percona-xtrabackup-{{ pxb_version }}-linux-x86_64.tar.gz"
        dest: /opt
        remote_src: yes

    - name: Add PXB to PATH
      shell: echo 'export PATH=/opt/percona-xtrabackup-{{ pxb_version }}-linux-x86_64/bin:$PATH' >> ~/.bashrc

    - name: Run full backup
      shell: /opt/percona-xtrabackup-{{ pxb_version }}-linux-x86_64/bin/xtrabackup --backup --target-dir=/tmp/backups --user=root

    - name: Prepare backup
      shell: /opt/percona-xtrabackup-{{ pxb_version }}-linux-x86_64/bin/xtrabackup --prepare --target-dir=/tmp/backups

    - name: Run LZ4 backup
      shell: /opt/percona-xtrabackup-{{ pxb_version }}-linux-x86_64/bin/xtrabackup --backup --target-dir=/tmp/backup_lz4 --compress=lz4 --compress-threads=2 --user=root

    - name: Decompress LZ4 backup
      shell: /opt/percona-xtrabackup-{{ pxb_version }}-linux-x86_64/bin/xtrabackup --decompress --target-dir=/tmp/backup_lz4

    - name: Prepare LZ4 backup
      shell: /opt/percona-xtrabackup-{{ pxb_version }}-linux-x86_64/bin/xtrabackup --prepare --target-dir=/tmp/backup_lz4

    - name: Run ZSTD backup
      shell: /opt/percona-xtrabackup-{{ pxb_version }}-linux-x86_64/bin/xtrabackup --backup --target-dir=/tmp/backup_zstd --compress=zstd --compress-threads=2 --user=root

    - name: Decompress ZSTD backup
      shell: /opt/percona-xtrabackup-{{ pxb_version }}-linux-x86_64/bin/xtrabackup --decompress --target-dir=/tmp/backup_zstd

    - name: Prepare ZSTD backup
      shell: /opt/percona-xtrabackup-{{ pxb_version }}-linux-x86_64/bin/xtrabackup --prepare --target-dir=/tmp/backup_zstd

    - name: Clean MySQL installation
      apt:
        name: mysql-server
        state: absent
        purge: yes

    - name: Validate MySQL cleanup
      shell: pgrep mysql || echo "MySQL is not running."

    - name: Clean backup dirs
      file:
        path: "/tmp/{{ item }}"
        state: absent
      loop:
        - backups
        - backup_lz4
        - backup_zstd
