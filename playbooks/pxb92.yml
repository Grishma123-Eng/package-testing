---
- hosts: all
  become: true
  become_method: sudo
  environment:
    chdir: "{{ playbook_dir }}"

  tasks:


    - name: Echo server_to_test variable
      debug:
        msg: "{{ lookup('env', 'server_to_test') }}"

    - name: include tasks for test env setup
      include_tasks: ../tasks/test_prep.yml

 #   - name: Read MYSQL_VERSION from VERSIONS file
  #    shell: grep '^MYSQL_VERSION=' /package-testing/VERSIONS | cut -d'=' -f2 | tr -d '"'
   #   register: MYSQL_VERSION_var

   #- name: Set MySQL version fact
     # set_fact:
    #    MYSQL_VERSION: "{{ MYSQL_VERSION_var.stdout }}"

    - name: Extract PXB major and minor version number using shell commands
      shell: cat /package-testing/VERSIONS | grep 'PXB_INN_LTS_MAJ_VER' | cut -d'=' -f2 | sed 's/"//g'
      register: pxb_version_major_minor

    - name: Extract PXB major version number using shell commands
      shell: cat /package-testing/VERSIONS | grep PXB_INN_LTS_MAJ_VER | awk -F'[=".]' '{print $3"."$4}'
      register: pxb_version_major

   # - name: Extract major.minor for MySQL
    #  shell: echo "{{ MYSQL_VERSION }}" | cut -d. -f1,2
     # register: mysql_major_minor

    - name: Extract version number using shell commands
      shell: cat /package-testing/VERSIONS | grep -oP 'PXB_INN_LTS_MAJ_VER="\K(\d+)\.(\d+)' | tr -d '.'
      register: major_release_version

    - name: Set major_release_version variable
      set_fact:
        major_release_version: "{{ major_release_version.stdout }}"

    - name: Set pxb_version_major variable
      set_fact:
        pxb_version_major: "{{ pxb_version_major.stdout }}"

    - name: Set pxb_version_major_minor variable
      set_fact:
        pxb_version_major_minor: "{{ pxb_version_major_minor.stdout }}"

#upstream:

    - name: Import key for mysql-repo add GPG key (Debian)
      apt_key:
        url: http://repo.mysql.com/RPM-GPG-KEY-mysql-2023  
        state: present
      when: 
        - ansible_os_family == "Debian"
        - lookup('env', 'server_to_test') == "ms-innovation-lts"

    - name: download and extract world database
      command: "{{ item }}"
      with_items:
        - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql
      when:
        - lookup('env', 'server_to_test') == "ms-innovation-lts"


    - name: install deb packages
      apt:
        name: "{{ packages }}"
        update_cache: yes
      vars:
        packages:
        - vim
        - pv
        - unzip
      when: 
          - ansible_os_family == "Debian"
          - lookup('env', 'server_to_test') == "ms-innovation-lts"


    - name: Install mysql deb packages using tarballs ubuntu 22.04
      command: wget https://cdn.mysql.com/archives/mysql-"{{ pxb_version_major }}"/mysql-server_"{{ pxb_version_major_minor }}"-1ubuntu22.04_amd64.deb-bundle.tar
      when: 
        - ansible_distribution == 'Ubuntu' and ansible_distribution_version == '22.04'
        - lookup('env', 'server_to_test') == "ms-innovation-lts"

    - name: extract mysql deb packages for ubuntu 22.04
      command: tar -xvf mysql-server_"{{ pxb_version_major_minor }}"-1ubuntu22.04_amd64.deb-bundle.tar -C /tmp
      when: 
        - ansible_distribution == 'Ubuntu' and ansible_distribution_version == '22.04'
        - lookup('env', 'server_to_test') == "ms-innovation-lts"
 
    - name: extract mysql deb packages for ubuntu 22.04
      command: tar -xvf mysql-server_"{{ pxb_version_major_minor }}"-1ubuntu22.04_amd64.deb-bundle.tar -C /tmp
      when: 
        - ansible_distribution == 'Ubuntu' and ansible_distribution_version == '22.04'
        - lookup('env', 'server_to_test') == "ms-innovation-lts"

##
    - name: install mysql deb packages
      shell: dpkg -i /tmp/*.deb || apt-get install -f -y
      environment:
        DEBIAN_FRONTEND: noninteractive
      when: 
        - ansible_os_family == "Debian"
        - lookup('env', 'server_to_test') == "ms-innovation-lts"  

    - name: Start the MySQL service
      service: name=mysql state=started
      when: 
        - ansible_os_family == "Debian"
        - lookup('env', 'server_to_test') == "ms-innovation-lts"


    - name: Download percona-release for Ubuntu
      get_url:
        url: https://repo.percona.com/apt/percona-release_latest.generic_all.deb
        dest: /tmp/percona-release.deb
      when: ansible_os_family == "Debian"

    - name: Install percona-release for Ubuntu
      apt:
        deb: /tmp/percona-release.deb
        state: present
      when: ansible_os_family == "Debian"

    - name: Enable PXB 9.x innovation experimental repo
      shell: percona-release enable only pxb-9x-innovation experimental
      when: 
        - lookup('env', 'install_repo')  == "experimental"

    - name: install Percona XtraBackup {{ major_release_version }} packages
      include_tasks: ../tasks/install_pxb_innovation_lts.yml
      when: 
        - lookup('env', 'install_repo') == "experimental"

#backup

    - name: install plugins, import world database
      command: /package-testing/plugins_test.sh

    - name: check that Percona XtraBackup version is correct
      command: /package-testing/version_check.sh pxb{{ major_release_version }}

    - name: check that Percona XtraBackup package versions are correct
      command: /package-testing/package_check.sh pxb{{ major_release_version }}

    - name: run backup
      command: /usr/bin/xtrabackup --backup --user=root --target-dir=/tmp/backups/

    - name: prepare backup
      command: /usr/bin/xtrabackup --prepare --user=root --target-dir=/tmp/backups/

    - name: Stop MySQL before restoring from PXB backup
      service:
        name: mysql
        state: stopped
      ignore_errors: true

    - name: Clean MySQL datadir before PXB restore
      file:
        path: /var/lib/mysql
        state: absent
      ignore_errors: true

    - name: Restore PXB backup to datadir
      shell: |
        cp -R /tmp/backups/* /var/lib/mysql
        chown -R mysql:mysql /var/lib/mysql